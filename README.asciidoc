= Codefather: A Coding Kata on Naming

A coding kata about good (and bad!) naming in software development.

TIP: In Greece, at least, Godfathers pick the name for the child they baptize. This is where
`Codefather` comes from, but it is quite possible that a lot of people don't have this prior
knowledge, which renders the choice of this name for the kata a clear problem. Though the play
on words makes `Codefather` a fun title, it is arguably still a bad choice.
Consider this the first lesson included in this kata about naming.

== Goal

By the end of this kata you should have established an appreciation of the intrinsic
difficulty in picking good names and you will hopefully be convinced that naming is
an important activity in software development and is worth your time and energy.

== Requirements

Even though you can choose any programming language, this kata is really a modeling exercise.
It is thus possible to complete this on a piece of paper, a napkin, a notepad, your
favourite IDE or text editor. In fact, you can even solve this in your brain!

== General Naming Rules

Before you go on to the kata itself, you might want to consider the following
link:NamingRules.asciidoc[list of rules] around naming.


== Problem Description

The problem we will examine is one we all have to deal with: Our mobile phone bills.

In short, you are responsible for creating a model, i.e. all the objects and data structures
that can provide your client - the mobile network operator - the most flexibility in billing
its subscribers.

We need the model to support the creation of the mobile phone bill.

== Step 1. Modeling the Main Entities
Think about the model first.

Decide what you want each main entity to be called.

NOTE: If working in a group, this can also be done as a group exercise, so you can all reach
a common understanding of the domain together.

* How does the MNO refer to you as?
* What do you call the service you buy from the MNO?
* What is the document we are talking about called? (Maybe `bill` is ok, but maybe not!)
** What elements appear in this document?
** What do you call each one of them?
** Where do these entities belong? How are they linked with the other main entities?

=== Remember
Things that are commonly included in mobile phone bills (include as many of these as you
have time for, maybe just start with the top 2):

* Calls,
* SMS,
* MMS,
* Data,
* Monthly subscription fee,
* Tax (various types)


TIP: This part is about picking good names for the model. Are you happy with the names of
all the objects / data structures and their attributes ? If not, refactor!

== Step 2. API
Now, let's go into how the bill is actually created.

Assume there is a `main` entry point function into your application. Your next task is
to show the flow of function calls from that main method, so that the bill has been
generated by the end of it.

_For simplicity, at this point, just consider a single bill, say, for one month._

[source,java]
----
public static void main(String[] args){
  // TODO: create bill
}
----

TIP: This part is about picking good names for the "working parts" of your code. By
writing the functions (and therefore the relations) between the different objects, you
will probably spot some names can be improved. Refactor!

== Step 3. Let's Spice Things up a Little
In addition, you can consider the following common modifiers to the above items, just to
spice things up a bit:

* pre-pay customers!
** _So far, we have been assuming a post-pay customer, with a monthly
bill, but in some countries pre-pay customers comprise 80-90% of total users!_
** Does your model support them?
** Do the names that you've picked cover this case?
* Usage during "peak" hours vs. off-peak (e.g. evenings & weekends),
* Calls, etc. made to the same network vs. cross-network,
* Usage included in monthly plan vs. extra usage

== Step 4. Welcome to the real world
Finally, consider that the MNO needs to either:

* create all invoices on a set day of the month
* create invoices on a standard period (e.g. monthly) after the subscriber originally
signed on (e.g. on the 6th month)

TIP: If you think this is getting complex already, think again... We're only really
getting started here. There are so many more options out there! (e.g. what about
incoming calls / SMS getting billed? _Yes, that happens!_)